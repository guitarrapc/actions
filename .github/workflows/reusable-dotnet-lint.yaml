name: (R) dotnet lint

on:
  workflow_call:
    inputs:
      sln-root:
        default: "."
        description: .sln root to execute dotnet-format
        required: false
        type: string
      # temporary workaround for 9.0.200 https://github.com/dotnet/sdk/issues/46780
      dotnet-version:
        default: |
          8.0.x
          9.0.x
        # default: |
        #   8.0.x
        #   9.0.x
        description: dotnet-version to use
        required: false
        type: string
      base-branch:
        default: "main"
        description: base branch to create PR
        required: false
        type: string
      exclude-csprojs:
        default: ""
        description: |
            specify csproj to exclude from format.
            2 way support.
              1. specify csproj in single line
              ```
              exluce-csprojs: foo.csproj bar.csproj
              ```
              2. specify csproj in multi line
              ```
              exluce-csprojs: |
                foo.csproj
                bar.csproj
              ```
        required: false
        type: string

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Prepare .NET
        uses: guitarrapc/actions/.github/actions/setup-dotnet@main
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
          restore-wasm-workload: "true"

      - name: Create excludes arguments
        id: exclude-args
        run: |
          exclude_args=""
          if [[ "${{ inputs.exclude-csprojs }}" != "" ]]; then
            exclude_csprojs="${{ inputs.exclude-csprojs }}"
            IFS=" " read -r -a csprojs <<< "${exclude_csprojs//$'\n'/ }"
            for item in "${csprojs[@]}"; do
              exclude_args+="-v $item ";
            done
          fi
          echo "argument=$exclude_args" | tee -a "$GITHUB_OUTPUT"
      # dotnet list
      - name: Obtain csproj to lint
        run: |
          if [[ "${{ steps.exclude-args.outputs.argument }}" != "" ]]; then
            projects=$(dotnet sln list | tail -n +3 | grep ${{ steps.exclude-args.outputs.argument }})
          else
            projects=$(dotnet sln list | tail -n +3)
          fi
          format_projects=$(echo "$projects" | sort | xargs -n 1 echo '  *')
          IFS=" " read -r -a array_projects <<< "${projects//$'\n'/ }"

          {
            echo "PROJECTS<<EOF"
            echo "${projects}"
            echo "EOF"
          } | tee -a "$GITHUB_ENV"
          {
            echo "FORMAT_PROJECTS<<EOF"
            echo "${format_projects}"
            echo "EOF"
          } | tee -a "$GITHUB_ENV"
          echo "PROJECT_LENGTH=${#array_projects[@]}" | tee -a "$GITHUB_ENV"
        working-directory: ${{ inputs.sln-root }}

      - name: Add dotnet-format problem matcher
        uses: xt0rted/dotnet-format-problem-matcher@b90c4f18e3daa4f8fd266e41eba4f351b2e00b75 # v1.2.0

      # dotnet format is build-in from dotnet 6.0 sdk. --exclude is for path, NOT project.
      - name: Dotnet Format
        run: |
          i=0
          echo "${{ env.PROJECTS }}" | while IFS= read -r csproj; do
            echo "($((i=i+1))/${{ env.PROJECT_LENGTH }}) formatting csproj '$csproj'."
            dotnet format "$csproj" --verbosity diagnostic
          done
        working-directory: ${{ inputs.sln-root }}

      # check format may not broken the code.
      - name: Dotnet Build
        run: dotnet build
        working-directory: ${{ inputs.sln-root }}

      # is change happen?
      - name: Check for modified files
        id: git-check
        run: echo "modified=$(if git diff-index --quiet HEAD --; then echo "false"; else echo "true"; fi)" >> "$GITHUB_OUTPUT"

      # get directory stats
      - name: List modified directories
        if: steps.git-check.outputs.modified == 'true'
        run: |
          dirs=$(git diff --dirstat=files)
          {
            echo "CHANGED_DIRS<<EOF"
            echo "${dirs}"
            echo "EOF"
          } | tee -a "$GITHUB_ENV"

      # get files stats
      - name: List modified files
        if: steps.git-check.outputs.modified == 'true'
        run: |
          files=$(git diff --name-only)
          {
            echo "CHANGED_FILES<<EOF"
            echo "${files}"
            echo "EOF"
          } | tee -a "$GITHUB_ENV"

      # Commit if change happen, then craete PR. force push when ions[botbranch/pr already exists.
      - name: Create PullRequest
        if: steps.git-check.outputs.modified == 'true'
        id: cpr
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # v7.0.8
        with:
          base: "${{ inputs.base-branch }}"
          branch: "auto-pr/dotnet-format"
          author: github-actions[bot] <41898282+github-act]@users.noreply.github.com>
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          delete-branch: true
          commit-message: "[dotnet format] Automated changes"
          title: "[dotnet format] Automated changes"
          body: |
            ## tl;dr;
            dotnet format generated changes based on .editorconfig

            ## Stats

            changed directories

            ```
            ${{ env.CHANGED_DIRS }}
            ```

            ## Files

            <details>
            <summary>Click to show.</summary>

            ```
            ${{ env.CHANGED_FILES }}
            ```

            </details>

            ## Target Projects

            Target project number is ${{ env.PROJECT_LENGTH }}.

            ${{ env.FORMAT_PROJECTS }}

          labels: |
            automated pr

      - name: Check outputs
        if: steps.git-check.outputs.modified == 'true'
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"
